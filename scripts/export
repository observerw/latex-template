#! /usr/bin/env python3

import argparse
import re
import shutil
from collections.abc import Generator, Iterable
from pathlib import Path

tex_input_re = re.compile(r"^\s*\\input{(.*?)}")
comments_re = re.compile(r"(?<!\\)%.*$")
empty_lines_re = re.compile(r"\n\s*\n+")

export_blob_path = Path(".export")


def transform(path: Path) -> Generator[str, None, list[Path]]:
    def transform_line(line: str) -> Generator[str, None, list[Path]]:
        if not (match := tex_input_re.match(line)):
            yield line
            return []

        input_path = Path(match.group(1)).with_suffix(".tex")
        if not input_path.exists():
            raise FileNotFoundError(f"File {input_path} included in {path} not found")

        yield "\n"
        inner_input_paths = yield from transform(input_path)
        yield "\n"

        return [input_path, *inner_input_paths]

    input_paths: list[Path] = []
    with open(path, "r", encoding="utf-8") as f:
        for line in f:
            inner_input_paths = yield from transform_line(line)
            input_paths.extend(inner_input_paths)

    return input_paths


def transform_file(main_file_path: Path, export_dir_path: Path) -> list[Path]:
    content_iter = transform(main_file_path)
    with open(export_dir_path / "main.tex", "w", encoding="utf-8") as f:
        while True:
            try:
                f.write(next(content_iter))
            except StopIteration as e:
                return e.value + [main_file_path]


def export_files(export_dir_path: Path, exclude: Iterable[Path] | None = None):
    if not export_blob_path.exists():
        raise FileNotFoundError("No .export file found")

    exclude = set(exclude or ())
    blobs = export_blob_path.read_text(encoding="utf-8").splitlines()
    blobs = (blob for raw_blobs in blobs if (blob := raw_blobs.strip()))
    file_paths = (
        path  #
        for blob in blobs
        for path in Path(".").glob(blob)
        if path.is_file() and path not in exclude
    )

    for file_path in file_paths:
        target_path = export_dir_path / file_path
        target_path.parent.mkdir(parents=True, exist_ok=True)
        shutil.copy2(file_path, target_path)
        print(f"Exported: {file_path}")


def remove_comments(export_dir_path: Path):
    def apply(file_path: Path):
        content = file_path.read_text(encoding="utf-8")
        content = re.sub(comments_re, "", content, flags=re.MULTILINE)
        content = re.sub(empty_lines_re, "\n\n", content)
        file_path.write_text(content, encoding="utf-8")

    for tex_file in export_dir_path.glob("**/*.tex"):
        apply(tex_file)


def compress(export_dir_path: Path):
    export_zip_path = export_dir_path.with_suffix(".zip")
    export_zip_path.unlink(missing_ok=True)
    shutil.make_archive(export_zip_path.name, "zip", export_dir_path)


def main():
    parser = argparse.ArgumentParser(
        description="Export files based on .export configuration"
    )
    parser.add_argument(
        "--single-file",
        "-s",
        action="store_true",
        help="Export main.tex only",
    )
    parser.add_argument(
        "--ignore-comments",
        "-i",
        action="store_true",
        help="Remove comments from exported .tex files",
    )
    parser.add_argument(
        "--compress",
        "-c",
        action="store_true",
        help="Compress export directory",
    )
    parser.add_argument(
        "--export-dir",
        "-d",
        type=str,
        default="export",
        help="Custom name for the export directory",
    )
    parser.add_argument(
        "--main-file",
        "-m",
        type=str,
        default="main.tex",
        help="Custom name for the main .tex file",
    )
    args = parser.parse_args()

    export_dir_path = Path(args.export_dir)
    main_file_path = Path(args.main_file)

    try:
        if export_dir_path.exists():
            shutil.rmtree(export_dir_path)
        export_dir_path.mkdir()

        if not main_file_path.exists():
            raise FileNotFoundError(f"{main_file_path} does not exists")

        exclude = (
            transform_file(main_file_path, export_dir_path)  #
            if args.single_file
            else []
        )
        export_files(export_dir_path, exclude)

        if args.ignore_comments:
            remove_comments(export_dir_path)
        if args.compress:
            compress(export_dir_path)

        print(
            f"Export completed successfully."
            f"{' (Comments removed)' if args.ignore_comments else ''}"
            f"{' (Single file)' if args.single_file else ''}"
            f"{' (Compressed)' if args.compress else ''}"
        )
    except Exception as e:
        print(f"Error during export: {e}")


if __name__ == "__main__":
    main()
